{"ast":null,"code":"var _jsxFileName = \"/Users/rachaelstanislaw/Desktop/treasure-hunt-react/src/App.js\";\nimport React, { Component } from 'react';\nimport Square from './components/Square';\nimport './App.css';\nimport beanBaby from './assets/beanBaby.png';\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.startGame = () => {\n      let bean = Math.floor(Math.random() * 9);\n      let snail = Math.floor(Math.random() * 9);\n\n      if (bean === snail) {\n        snail = Math.floor(Math.random() * 9);\n        bean = Math.floor(Math.random() * 9);\n      }\n\n      this.setState({\n        squares: [...Array(9).fill(\"?\")],\n        jellyBeanLoc: bean,\n        snailLoc: snail,\n        counter: 5\n      });\n      console.log(\"bean\", bean, \"snail\", snail);\n    };\n\n    this.gameLogic = loc => {\n      let {\n        squares,\n        counter,\n        jellyBeanLoc,\n        snailLoc\n      } = this.state;\n\n      if (jellyBeanLoc !== null && snailLoc !== null) {\n        if (counter > 0) {\n          this.setState({\n            squares: squares.map((value, index) => {\n              if (loc === jellyBeanLoc && loc === index) {\n                alert(\"winner!\");\n                return \"bean\";\n              } else if (loc === snailLoc && loc === index) {\n                alert(\"You stepped on a snail! You go home to cry over your guilt.\");\n                return \"snail\";\n              } else if (loc === index) {\n                return \"nope\";\n              } else {\n                return value;\n              }\n            }),\n            counter: counter - 1\n          });\n        } else {\n          alert(\"Miss Greta died becasue she cried too much\");\n          this.setState({\n            jellyBeanLoc: null,\n            snailLoc: null\n          });\n        }\n      }\n\n      if (loc === jellyBeanLoc || loc === snailLoc) {\n        this.setState({\n          jellyBeanLoc: null,\n          snailLoc: null\n        });\n      }\n    };\n\n    this.state = {\n      squares: [...Array(9).fill(\"?\")],\n      jellyBeanLoc: null,\n      snailLoc: null,\n      counter: 5,\n      clickedBoxes: []\n    };\n  }\n\n  render() {\n    let {\n      squares,\n      counter\n    } = this.state;\n    let grid = squares.map((value, index) => {\n      return /*#__PURE__*/React.createElement(Square, {\n        value: value,\n        index: index,\n        key: index,\n        gameLogic: this.gameLogic,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 9\n        }\n      });\n    });\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"board\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"column1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 13\n      }\n    }, \"The Jelly Bean Crisis\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 13\n      }\n    }, \"Help Miss Greta find her jelly beans! They fell out of the window all over the yard and she is too distraught to search herself. Find all the jelly beans before Miss Greta runs out of tears and dies. Oh and keep an eye out for snails!\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 13\n      }\n    }, \"- Miss Greta\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.startGame,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 13\n      }\n    }, \"Start Game\")), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"column2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"grid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 13\n      }\n    }, grid), /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 13\n      }\n    }, \"Tears Remaining\"), counter)));\n  }\n\n}","map":{"version":3,"sources":["/Users/rachaelstanislaw/Desktop/treasure-hunt-react/src/App.js"],"names":["React","Component","Square","beanBaby","App","constructor","props","startGame","bean","Math","floor","random","snail","setState","squares","Array","fill","jellyBeanLoc","snailLoc","counter","console","log","gameLogic","loc","state","map","value","index","alert","clickedBoxes","render","grid"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Square from './components/Square'\nimport './App.css';\nimport beanBaby from './assets/beanBaby.png'\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props)\n      this.state= {\n        squares: [...Array(9).fill(\"?\")],\n        jellyBeanLoc: null,\n        snailLoc: null,\n        counter: 5,\n        clickedBoxes: []\n      }\n  }\n\n  startGame = () => {\n    let bean = Math.floor(Math.random() * 9)\n    let snail = Math.floor(Math.random() * 9)\n    if(bean === snail) {\n      snail = Math.floor(Math.random() * 9)\n      bean = Math.floor(Math.random() * 9)\n    }\n    this.setState({\n      squares: [...Array(9).fill(\"?\")],\n      jellyBeanLoc: bean,\n      snailLoc: snail,\n      counter: 5\n    })\n    console.log(\"bean\", bean, \"snail\", snail);\n  }\n\n  gameLogic = (loc) => {\n    let { squares, counter, jellyBeanLoc, snailLoc } = this.state\n    if(jellyBeanLoc !== null && snailLoc !== null) {\n      if(counter > 0) {\n        this.setState({\n          squares: squares.map((value, index) => {\n            if(loc === jellyBeanLoc && loc === index) {\n              alert(\"winner!\")\n              return \"bean\"\n            } else if(loc === snailLoc && loc === index) {\n              alert(\"You stepped on a snail! You go home to cry over your guilt.\")\n              return \"snail\"\n            } else if(loc === index) {\n              return \"nope\"\n            } else {\n              return value\n            }\n          }),\n          counter: counter - 1\n        })\n      } else {\n        alert(\"Miss Greta died becasue she cried too much\")\n        this.setState({ jellyBeanLoc: null, snailLoc: null })\n      }\n    }\n    if(loc === jellyBeanLoc || loc === snailLoc) {\n      this.setState({ jellyBeanLoc: null, snailLoc: null })\n    }\n  }\n\n  render() {\n    let { squares, counter } = this.state\n    let grid = squares.map((value, index) => {\n      return (\n        <Square\n          value={ value }\n          index={ index }\n          key={ index }\n          gameLogic={ this.gameLogic }\n        />\n      )\n    })\n    return(\n      <>\n        <div id=\"board\">\n          <div id=\"column1\">\n            <h1>The Jelly Bean Crisis</h1>\n            <p>Help Miss Greta find her jelly beans! They fell out of the window all over the yard and she is too distraught to search herself. Find all the jelly beans before Miss Greta runs out of tears and dies. Oh and keep an eye out for snails!</p>\n            <p>\n            - Miss Greta\n            </p>\n            <button onClick={ this.startGame }>\n              Start Game\n            </button>\n          </div>\n          <div id=\"column2\">\n            <div id=\"grid\">\n              { grid }\n            </div>\n            <h4>Tears Remaining</h4>\n            { counter }\n          </div>\n        </div>\n      </>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}